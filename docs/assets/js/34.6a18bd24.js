(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{515:function(o,t,e){"use strict";e.r(t);var n=e(4),v=Object(n.a)({},(function(){var o=this,t=o.$createElement,e=o._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("p",[o._v("https://www.cnblogs.com/itplay/p/10744616.html")]),o._v(" "),e("blockquote",[e("p",[o._v("SpringBoot 自动配置主要通过 "),e("code",[o._v("@EnableAutoConfiguration")]),o._v(", "),e("code",[o._v("@Conditional")]),o._v(", "),e("code",[o._v("@EnableConfigurationProperties")]),o._v(" 或者 "),e("code",[o._v("@ConfigurationProperties")]),o._v(" 等几个注解来进行自动配置完成的。")])]),o._v(" "),e("blockquote",[e("p",[e("code",[o._v("@EnableAutoConfiguration")]),o._v(" 开启自动配置，主要作用就是调用 "),e("code",[o._v("Spring-Core")]),o._v(" 包里的 "),e("code",[o._v("loadFactoryNames()")]),o._v("，将 "),e("code",[o._v("autoconfig")]),o._v(" 包里的已经写好的自动配置加载进来。")])]),o._v(" "),e("blockquote",[e("p",[e("code",[o._v("@Conditional")]),o._v(" 条件注解，通过判断类路径下有没有相应配置的 "),e("code",[o._v("jar")]),o._v(" 包来确定是否加载和自动配置这个类。")])]),o._v(" "),e("blockquote",[e("p",[e("code",[o._v("@EnableConfigurationProperties")]),o._v(" 的作用就是，给自动配置提供具体的配置参数，只需要写在 "),e("code",[o._v("application.properties")]),o._v(" 中，就可以通过映射写入配置类的 "),e("code",[o._v("POJO")]),o._v(" 属性中。")])]),o._v(" "),e("ol",[e("li",[o._v("auto-configuration")]),o._v(" "),e("li",[o._v("starter")]),o._v(" "),e("li",[o._v("springboot cli")]),o._v(" "),e("li",[o._v("actuator")])])])}),[],!1,null,null,null);t.default=v.exports}}]);