(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{521:function(t,a,v){"use strict";v.r(a);var _=v(4),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("设计模式的原则")]),t._v(" "),v("ol",[v("li",[t._v("单一职责：一个类和一个方法只做一件事")]),t._v(" "),v("li",[t._v("里氏替换：多态、子类可以扩展父类")]),t._v(" "),v("li",[t._v("依赖倒置：细节依赖抽象，下层依赖上层")]),t._v(" "),v("li",[t._v("接口隔离：建立单一接口")]),t._v(" "),v("li",[t._v("迪米特原则：最少知道，降低耦合")]),t._v(" "),v("li",[t._v("开闭原则：抽象架构，扩展实现")])]),t._v(" "),v("p",[t._v("设计模式总体分为三种类型：")]),t._v(" "),v("h3",{attrs:{id:"一、创建型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、创建型模式"}},[t._v("#")]),t._v(" 一、创建型模式")]),t._v(" "),v("blockquote",[v("p",[t._v("这里模式提供创建对象的机制，能够提升已有代码的灵活性和可复用性。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"img/image-20201223165431130.png",alt:"image-20201223165431130"}})]),t._v(" "),v("h3",{attrs:{id:"二、结构型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、结构型模式"}},[t._v("#")]),t._v(" 二、结构型模式")]),t._v(" "),v("blockquote",[v("p",[t._v("这类模式结束如何将对象和类组成较大的结构，并同时保持结构的灵活和高效。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"img/image-20201223165644087.png",alt:"image-20201223165644087"}})]),t._v(" "),v("h3",{attrs:{id:"三、行为模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、行为模式"}},[t._v("#")]),t._v(" 三、行为模式")]),t._v(" "),v("blockquote",[v("p",[t._v("这类模式负责对象间的高效沟通和职责委派。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"img/image-20201223170414960.png",alt:"image-20201223170414960"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);